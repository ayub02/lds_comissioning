import time
import json
import tkinter
import numpy as np
import configparser
from tkinter import *
import paho.mqtt.client as paho
from datetime import datetime, timedelta


def on_message(_client, _userdata, _message):
    msg = json.loads(str(_message.payload.decode("utf-8")))
    # print(datetime.now(), '\t\t\t', msg)
    if 't_hb_MKT' in msg:
        print(datetime.now(), '\t\t\t', msg)
        hb_mkt.update_prop(msg['t_hb_MKT'], msg['registerMap_MKT'])
        hb_mkt.create_labels(1)
    if 't_hb_BV61' in msg:
        print(datetime.now(), '\t\t\t', msg)
        hb_bv61.update_prop(msg['t_hb_BV61'], msg['registerMap_BV61'])
        hb_bv61.create_labels(2)
    if 't_hb_BV62' in msg:
        print(datetime.now(), '\t\t\t', msg)
        hb_bv62.update_prop(msg['t_hb_BV62'], msg['registerMap_BV62'])
        hb_bv62.create_labels(3)
    if 't_hb_BV63' in msg:
        print(datetime.now(), '\t\t\t', msg)
        hb_bv63.update_prop(msg['t_hb_BV63'], msg['registerMap_BV63'])
        hb_bv63.create_labels(4)
    if 't_hb_BV64' in msg:
        print(datetime.now(), '\t\t\t', msg)
        hb_bv64.update_prop(msg['t_hb_BV64'], msg['registerMap_BV64'])
        hb_bv64.create_labels(5)
    if 't_hb_BV65' in msg:
        print(datetime.now(), '\t\t\t', msg)
        hb_bv65.update_prop(msg['t_hb_BV65'], msg['registerMap_BV65'])
        hb_bv65.create_labels(6)
    if 't_hb_BV66' in msg:
        print(datetime.now(), '\t\t\t', msg)
        hb_bv66.update_prop(msg['t_hb_BV66'], msg['registerMap_BV66'])
        hb_bv66.create_labels(7)
    if 't_hb_BV66A' in msg:
        print(datetime.now(), '\t\t\t', msg)
        hb_bv66A.update_prop(msg['t_hb_BV66A'], msg['registerMap_BV66A'])
        hb_bv66A.create_labels(8)
    if 't_hb_KBS' in msg:
        print(datetime.now(), '\t\t\t', msg)
        hb_kbs.update_prop(msg['t_hb_KBS'], msg['registerMap_KBS'])
        hb_kbs.create_labels(9)
    if 't_hb_BV69' in msg:
        print(datetime.now(), '\t\t\t', msg)
        hb_bv69.update_prop(msg['t_hb_BV69'], msg['registerMap_BV69'])
        hb_bv69.create_labels(10)
    if 't_hb_BV70' in msg:
        print(datetime.now(), '\t\t\t', msg)
        hb_bv70.update_prop(msg['t_hb_BV70'], msg['registerMap_BV70'])
        hb_bv70.create_labels(11)
    if 't_hb_BV70A' in msg:
        print(datetime.now(), '\t\t\t', msg)
        hb_bv70A.update_prop(msg['t_hb_BV70A'], msg['registerMap_BV70A'])
        hb_bv70A.create_labels(12)
    if 't_hb_BV71' in msg:
        print(datetime.now(), '\t\t\t', msg)
        hb_bv71.update_prop(msg['t_hb_BV71'], msg['registerMap_BV71'])
        hb_bv71.create_labels(13)
    if 't_hb_BV72' in msg:
        print(datetime.now(), '\t\t\t', msg)
        hb_bv72.update_prop(msg['t_hb_BV72'], msg['registerMap_BV72'])
        hb_bv72.create_labels(14)
    if 't_hb_BV72A' in msg:
        print(datetime.now(), '\t\t\t', msg)
        hb_bv72A.update_prop(msg['t_hb_BV72A'], msg['registerMap_BV72A'])
        hb_bv72A.create_labels(15)
    if 't_hb_FSD1' in msg:
        print(datetime.now(), '\t\t\t', msg)
        hb_fsd1.update_prop(msg['t_hb_FSD1'], msg['registerMap_FSD1'])
        hb_fsd1.create_labels(16)
    if 't_hb_FSD2' in msg:
        print(datetime.now(), '\t\t\t', msg)
        hb_fsd2.update_prop(msg['t_hb_FSD2'], msg['registerMap_FSD2'])
        hb_fsd2.create_labels(17)
    if 't_hb_BV74A' in msg:
        print(datetime.now(), '\t\t\t', msg)
        hb_bv74A.update_prop(msg['t_hb_BV74A'], msg['registerMap_BV74A'])
        hb_bv74A.create_labels(18)
    if 't_hb_BV75' in msg:
        print(datetime.now(), '\t\t\t', msg)
        hb_bv75.update_prop(msg['t_hb_BV75'], msg['registerMap_BV75'])
        hb_bv75.create_labels(19)
    if 't_hb_BV76' in msg:
        print(datetime.now(), '\t\t\t', msg)
        hb_bv76.update_prop(msg['t_hb_BV76'], msg['registerMap_BV76'])
        hb_bv76.create_labels(20)
    if 't_hb_MCK1' in msg:
        print(datetime.now(), '\t\t\t', msg)
        hb_mck1.update_prop(msg['t_hb_MCK1'], msg['registerMap_MCK1'])
        hb_mck1.create_labels(21)


class HeartBeat:
    def __init__(self):
        self.Arrival_Timestamp = StringVar()
        self.Heartbeat_Timestamp = StringVar()
        self.ACK_NPW_BUFF = IntVar()
        self.AVERAGE_TRANS_TIME = IntVar()
        self.AVG_RESPONSE_TIME = IntVar()
        self.BAD_CRC_COUNT = IntVar()
        self.BAD_VAL_COUNT = IntVar()
        self.COMM_FAILURE_COUNT = IntVar()
        self.COMM_SUCCESS_COUNT = IntVar()
        self.EDGE_CPU = IntVar()
        self.EDGE_CPU_TEMP = IntVar()
        self.EDGE_GPS_SYNC_STATUS = IntVar()
        self.EDGE_GPS_SYNC_VAL = IntVar()
        self.EDGE_MW_COMM_STATUS = IntVar()
        self.EDGE_RAM = IntVar()
        self.EDGE_START_TIME = IntVar()
        self.EDGE_STORAGE = IntVar()
        self.FLAG_NPW_SUPPRESS = IntVar()
        self.HEARTBEAT_INTERVAL = IntVar()
        self.MAX_TIME_PERIODIC = IntVar()
        self.MIN_TIME_PERIODIC = IntVar()
        self.NO_RSPNS_COUNT = IntVar()
        self.NPW_EXP_TIME = IntVar()
        self.NPW_NUM_PACK = IntVar()
        self.NPW_SAMPLE_AFTER = IntVar()
        self.NPW_SAMPLE_BEFORE = IntVar()
        self.NPW_THR_PT_1 = IntVar()
        self.NPW_THR_PT_2 = IntVar()
        self.NPW_THR_PT_3 = IntVar()
        self.NPW_THR_PT_4 = IntVar()
        self.NUM_SAMPLES_1_AVG = IntVar()
        self.NUM_SAMPLES_2_AVG = IntVar()
        self.NUM_SAMPLES_PT_PERIODIC = IntVar()
        self.BREACH_ONLY_ON_DROP = IntVar()
        self.RAW_DUMP_DURATION = IntVar()
        self.ON_CHANG_THSH_PT = IntVar()
        self.ON_CHANG_THSH_TT = IntVar()
        self.PACKET_DROP_COUNT = IntVar()
        self.QUEUED_NPW_BUFFERS = IntVar()
        self.REBOOT_TIME = IntVar()
        self.registerMap = IntVar()
        self.SAMPLE_INTERVAL_NPW = IntVar()
        self.SCALING_FACTOR_PT = IntVar()
        self.SCALING_OFFSET_PT = IntVar()
        self.START_SAMPLE_2_AVG = IntVar()
        self.TEST_FLAG = IntVar()

    def update_prop(self, _hb_timestamp, _param):
        your_dt = datetime.fromtimestamp(int(_hb_timestamp) / 1000)  # using the local timezone
        self.Arrival_Timestamp.set('0')
        self.Heartbeat_Timestamp.set('0')
        # self.Arrival_Timestamp.set(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        # self.Heartbeat_Timestamp.set(your_dt.strftime("%Y-%m-%d %H:%M:%S"))
        self.registerMap.set(_param[0])
        self.NPW_NUM_PACK.set(_param[1])
        self.NPW_EXP_TIME.set(_param[2])
        self.MAX_TIME_PERIODIC.set(_param[3])
        self.MIN_TIME_PERIODIC.set(_param[4])
        self.ON_CHANG_THSH_PT.set(_param[5])
        self.ON_CHANG_THSH_TT.set(_param[7])
        self.SAMPLE_INTERVAL_NPW.set(_param[9])
        self.NUM_SAMPLES_1_AVG.set(_param[10])
        self.NUM_SAMPLES_2_AVG.set(_param[11])
        self.START_SAMPLE_2_AVG.set(_param[12])
        self.NPW_SAMPLE_BEFORE.set(_param[13])
        self.NPW_SAMPLE_AFTER.set(_param[14])
        self.TEST_FLAG.set(_param[15])
        self.REBOOT_TIME.set(_param[16])
        self.HEARTBEAT_INTERVAL.set(_param[17])
        self.ACK_NPW_BUFF.set(_param[18])
        self.NPW_THR_PT_1.set(_param[19])
        self.NPW_THR_PT_2.set(_param[20])
        self.NPW_THR_PT_3.set(_param[21])
        self.NPW_THR_PT_4.set(_param[22])
        self.SCALING_OFFSET_PT.set(_param[23])
        self.SCALING_FACTOR_PT.set(_param[24])
        self.FLAG_NPW_SUPPRESS.set(_param[25])
        self.NUM_SAMPLES_PT_PERIODIC.set(_param[26])
        self.BREACH_ONLY_ON_DROP.set(_param[28])
        self.RAW_DUMP_DURATION.set(_param[29])
        # self.EDGE_START_TIME.set(_param[31])
        self.EDGE_START_TIME.set(0)
        self.EDGE_RAM.set(_param[32])
        self.EDGE_STORAGE.set(_param[33])
        self.EDGE_CPU.set(_param[34])
        self.EDGE_CPU_TEMP.set(_param[35])
        self.EDGE_GPS_SYNC_STATUS.set(_param[36])
        self.EDGE_GPS_SYNC_VAL.set(_param[37])
        self.EDGE_MW_COMM_STATUS.set(_param[38])
        self.BAD_VAL_COUNT.set(_param[39])
        self.BAD_CRC_COUNT.set(_param[40])
        self.NO_RSPNS_COUNT.set(_param[41])
        self.COMM_FAILURE_COUNT.set(_param[43])
        self.COMM_SUCCESS_COUNT.set(_param[44])
        self.AVERAGE_TRANS_TIME.set(_param[45])
        self.QUEUED_NPW_BUFFERS.set(_param[46])
        self.AVG_RESPONSE_TIME.set(_param[47])
        self.PACKET_DROP_COUNT.set(_param[48])

    def create_labels(self, _column):
        var_Arrival_Timestamp = Label(_frame, text=str(self.Arrival_Timestamp.get())).grid(row=1, column=_column)
        var_Heartbeat_Timestamp = Label(_frame, text=str(self.Heartbeat_Timestamp.get())).grid(row=2, column=_column)
        var_registerMap = Label(_frame, text=str(self.registerMap.get())).grid(row=3, column=_column)
        var_NPW_NUM_PACK = Label(_frame, text=str(self.NPW_NUM_PACK.get())).grid(row=4, column=_column)
        var_NPW_EXP_TIME = Label(_frame, text=str(self.NPW_EXP_TIME.get())).grid(row=5, column=_column)
        var_MAX_TIME_PERIODIC = Label(_frame, text=str(self.MAX_TIME_PERIODIC.get())).grid(row=6, column=_column)
        var_MIN_TIME_PERIODIC = Label(_frame, text=str(self.MIN_TIME_PERIODIC.get())).grid(row=7, column=_column)
        var_ON_CHANG_THSH_PT = Label(_frame, text=str(self.ON_CHANG_THSH_PT.get())).grid(row=8, column=_column)
        var_ON_CHANG_THSH_TT = Label(_frame, text=str(self.ON_CHANG_THSH_TT.get())).grid(row=9, column=_column)
        var_SAMPLE_INTERVAL_NPW = Label(_frame, text=str(self.SAMPLE_INTERVAL_NPW.get())).grid(row=10, column=_column)
        var_NUM_SAMPLES_1_AVG = Label(_frame, text=str(self.NUM_SAMPLES_1_AVG.get())).grid(row=11, column=_column)
        var_NUM_SAMPLES_2_AVG = Label(_frame, text=str(self.NUM_SAMPLES_2_AVG.get())).grid(row=12, column=_column)
        var_START_SAMPLE_2_AVG = Label(_frame, text=str(self.START_SAMPLE_2_AVG.get())).grid(row=13, column=_column)
        var_NPW_SAMPLE_BEFORE = Label(_frame, text=str(self.NPW_SAMPLE_BEFORE.get())).grid(row=14, column=_column)
        var_NPW_SAMPLE_AFTER = Label(_frame, text=str(self.NPW_SAMPLE_AFTER.get())).grid(row=15, column=_column)
        var_TEST_FLAG = Label(_frame, text=str(self.TEST_FLAG.get())).grid(row=16, column=_column)
        var_REBOOT_TIME = Label(_frame, text=str(self.REBOOT_TIME.get())).grid(row=17, column=_column)
        var_HEARTBEAT_INTERVAL = Label(_frame, text=str(self.HEARTBEAT_INTERVAL.get())).grid(row=18, column=_column)
        var_ACK_NPW_BUFF = Label(_frame, text=str(self.ACK_NPW_BUFF.get())).grid(row=19, column=_column)
        var_NPW_THR_PT_1 = Label(_frame, text=str(self.NPW_THR_PT_1.get())).grid(row=20, column=_column)
        var_NPW_THR_PT_2 = Label(_frame, text=str(self.NPW_THR_PT_2.get())).grid(row=21, column=_column)
        var_NPW_THR_PT_3 = Label(_frame, text=str(self.NPW_THR_PT_3.get())).grid(row=22, column=_column)
        var_NPW_THR_PT_4 = Label(_frame, text=str(self.NPW_THR_PT_4.get())).grid(row=23, column=_column)
        var_SCALING_OFFSET_PT = Label(_frame, text=str(self.SCALING_OFFSET_PT.get())).grid(row=24, column=_column)
        var_SCALING_FACTOR_PT = Label(_frame, text=str(self.SCALING_FACTOR_PT.get())).grid(row=25, column=_column)
        var_FLAG_NPW_SUPPRESS = Label(_frame, text=str(self.FLAG_NPW_SUPPRESS.get())).grid(row=26, column=_column)
        var_NUM_SAMPLES_PT_PERIODIC = Label(_frame, text=str(self.NUM_SAMPLES_PT_PERIODIC.get())).grid(row=27,
                                                                                                       column=_column)
        var_BREACH_ONLY_ON_DROP = Label(_frame, text=str(self.BREACH_ONLY_ON_DROP.get())).grid(row=28, column=_column)
        var_RAW_DUMP_DURATION = Label(_frame, text=str(self.RAW_DUMP_DURATION.get())).grid(row=29, column=_column)
        var_EDGE_START_TIME = Label(_frame, text=str(self.EDGE_START_TIME.get())).grid(row=30, column=_column)
        var_EDGE_RAM = Label(_frame, text=str(self.EDGE_RAM.get())).grid(row=31, column=_column)
        var_EDGE_STORAGE = Label(_frame, text=str(self.EDGE_STORAGE.get())).grid(row=32, column=_column)
        var_EDGE_CPU = Label(_frame, text=str(self.EDGE_CPU.get())).grid(row=33, column=_column)
        var_EDGE_CPU_TEMP = Label(_frame, text=str(self.EDGE_CPU_TEMP.get())).grid(row=34, column=_column)
        var_EDGE_GPS_SYNC_STATUS = Label(_frame, text=str(self.EDGE_GPS_SYNC_STATUS.get())).grid(row=35, column=_column)
        var_EDGE_GPS_SYNC_VAL = Label(_frame, text=str(self.EDGE_GPS_SYNC_VAL.get())).grid(row=36, column=_column)
        var_EDGE_MW_COMM_STATUS = Label(_frame, text=str(self.EDGE_MW_COMM_STATUS.get())).grid(row=37, column=_column)
        var_BAD_VAL_COUNT = Label(_frame, text=str(self.BAD_VAL_COUNT.get())).grid(row=38, column=_column)
        var_BAD_CRC_COUNT = Label(_frame, text=str(self.BAD_CRC_COUNT.get())).grid(row=39, column=_column)
        var_NO_RSPNS_COUNT = Label(_frame, text=str(self.NO_RSPNS_COUNT.get())).grid(row=40, column=_column)
        var_COMM_FAILURE_COUNT = Label(_frame, text=str(self.COMM_FAILURE_COUNT.get())).grid(row=41, column=_column)
        var_COMM_SUCCESS_COUNT = Label(_frame, text=str(self.COMM_SUCCESS_COUNT.get())).grid(row=42, column=_column)
        var_AVERAGE_TRANS_TIME = Label(_frame, text=str(self.AVERAGE_TRANS_TIME.get())).grid(row=43, column=_column)
        var_QUEUED_NPW_BUFFERS = Label(_frame, text=str(self.QUEUED_NPW_BUFFERS.get())).grid(row=44, column=_column)
        var_AVG_RESPONSE_TIME = Label(_frame, text=str(self.AVG_RESPONSE_TIME.get())).grid(row=45, column=_column)
        var_PACKET_DROP_COUNT = Label(_frame, text=str(self.PACKET_DROP_COUNT.get())).grid(row=46, column=_column)


def onFrameConfigure(canvas):
    # Reset the scroll region to encompass the inner frame
    canvas.configure(scrollregion=canvas.bbox("all"))


# Reading configurations
config = configparser.ConfigParser()
config.read('../config/NPW.ini')

# Kepware
broker = config['Kepware']['mqttHost']

mqtt_topics = [('MKT', 1), ('KBS', 1), ('FSD1', 1), ('FSD2', 1),('MW17', 1), ('MW18', 1), ('MW19', 1), ('MW20', 1), ('MW21', 1), ('MW22', 1), ('MW23', 1), ('MW24', 1), ('MW25', 1), ('MCK1', 1)]
client = paho.Client("client_0")
client.on_message = on_message
client.connect(broker)
client.loop_start()
client.subscribe(mqtt_topics)

root = tkinter.Tk()
_frame = Frame(root)
canvas = Canvas(root, borderwidth=0)
_frame = Frame(canvas)
vsb = Scrollbar(root, orient="vertical", command=canvas.yview)
canvas.configure(yscrollcommand=vsb.set)

vsb.pack(side="right", fill="y")
canvas.pack(side="left", fill="both", expand=True)
canvas.create_window((4, 4), window=_frame, anchor="nw")

_frame.bind("<Configure>", lambda event, canvas=canvas: onFrameConfigure(canvas))

hb_mkt = HeartBeat()
hb_bv61 = HeartBeat()
hb_bv62 = HeartBeat()
hb_bv63 = HeartBeat()
hb_bv64 = HeartBeat()
hb_bv65 = HeartBeat()
hb_bv66 = HeartBeat()
hb_bv66A = HeartBeat()
hb_kbs = HeartBeat()
hb_bv69 = HeartBeat()
hb_bv70 = HeartBeat()
hb_bv70A = HeartBeat()
hb_bv71 = HeartBeat()
hb_bv72 = HeartBeat()
hb_bv72A = HeartBeat()
hb_fsd1 = HeartBeat()
hb_fsd2 = HeartBeat()
hb_bv74A = HeartBeat()
hb_bv75 = HeartBeat()
hb_bv76 = HeartBeat()
hb_mck1 = HeartBeat()

label_Arrival_Timestamp = Label(_frame, text='Arrival_Timestamp', anchor='e').grid(row=1, column=0, stick=W)
label_Heartbeat_Timestamp = Label(_frame, text='Heartbeat_Timestamp', anchor='e').grid(row=2, column=0, stick=W)
label_registerMap = Label(_frame, text='registerMap', anchor='e').grid(row=3, column=0, stick=W)
label_NPW_NUM_PACK = Label(_frame, text='NPW_NUM_PACK', anchor='e').grid(row=4, column=0, stick=W)
label_NPW_EXP_TIME = Label(_frame, text='NPW_EXP_TIME', anchor='e').grid(row=5, column=0, stick=W)
label_MAX_TIME_PERIODIC = Label(_frame, text='MAX_TIME_PERIODIC', anchor='e').grid(row=6, column=0, stick=W)
label_MIN_TIME_PERIODIC = Label(_frame, text='MIN_TIME_PERIODIC', anchor='e').grid(row=7, column=0, stick=W)
label_ON_CHANG_THSH_PT = Label(_frame, text='ON_CHANG_THSH_PT', anchor='e').grid(row=8, column=0, stick=W)
label_ON_CHANG_THSH_TT = Label(_frame, text='ON_CHANG_THSH_TT', anchor='e').grid(row=9, column=0, stick=W)
label_SAMPLE_INTERVAL_NPW = Label(_frame, text='SAMPL_INTRVAL_NPW', anchor='e').grid(row=10, column=0, stick=W)
label_NUM_SAMPLES_1_AVG = Label(_frame, text='NUM_SAMPLES_1_AVG', anchor='e').grid(row=11, column=0, stick=W)
label_NUM_SAMPLES_2_AVG = Label(_frame, text='NUM_SAMPLES_2_AVG', anchor='e').grid(row=12, column=0, stick=W)
label_START_SAMPLE_2_AVG = Label(_frame, text='START_SAMPLE_2_AVG', anchor='e').grid(row=13, column=0, stick=W)
label_NPW_SAMPLE_BEFORE = Label(_frame, text='NPW_SAMPLE_BEFORE', anchor='e').grid(row=14, column=0, stick=W)
label_NPW_SAMPLE_AFTER = Label(_frame, text='NPW_SAMPLE_AFTER', anchor='e').grid(row=15, column=0, stick=W)
label_TEST_FLAG = Label(_frame, text='TEST_FLAG', anchor='e').grid(row=16, column=0, stick=W)
label_REBOOT_TIME = Label(_frame, text='REBOOT_TIME', anchor='e').grid(row=17, column=0, stick=W)
label_HEARTBEAT_INTERVAL = Label(_frame, text='HEARTBEAT_INTERVAL', anchor='e').grid(row=18, column=0, stick=W)
label_ACK_NPW_BUFF = Label(_frame, text='ACK_NPW_BUFF', anchor='e').grid(row=19, column=0, stick=W)
label_NPW_THR_PT_1 = Label(_frame, text='NPW_THR_PT_1', anchor='e').grid(row=20, column=0, stick=W)
label_NPW_THR_PT_2 = Label(_frame, text='NPW_THR_PT_2', anchor='e').grid(row=21, column=0, stick=W)
label_NPW_THR_PT_3 = Label(_frame, text='NPW_THR_PT_3', anchor='e').grid(row=22, column=0, stick=W)
label_NPW_THR_PT_4 = Label(_frame, text='NPW_THR_PT_4', anchor='e').grid(row=23, column=0, stick=W)
label_SCALING_OFFSET_PT = Label(_frame, text='SCALING_OFFSET_PT', anchor='e').grid(row=24, column=0, stick=W)
label_SCALING_FACTOR_PT = Label(_frame, text='SCALING_FACTOR_PT', anchor='e').grid(row=25, column=0, stick=W)
label_FLAG_NPW_SUPPRESS = Label(_frame, text='FLAG_NPW_SUPPRESS', anchor='e').grid(row=26, column=0, stick=W)
label_NUM_SAMPLES_PT_PERIODIC = Label(_frame, text='#_SAMPLES_PERIODIC', anchor='e').grid(row=27, column=0, stick=W)
label_BREACH_ONLY_ON_DROP = Label(_frame, text='BREACH_ONLY_ON_DROP', anchor='e').grid(row=28, column=0, stick=W)
label_RAW_DUMP_DURATION = Label(_frame, text='RAW_DUMP_DURATION', anchor='e').grid(row=29, column=0, stick=W)
label_EDGE_START_TIME = Label(_frame, text='EDGE_START_TIME', anchor='e').grid(row=30, column=0, stick=W)
label_EDGE_RAM = Label(_frame, text='EDGE_RAM', anchor='e').grid(row=31, column=0, stick=W)
label_EDGE_STORAGE = Label(_frame, text='EDGE_STORAGE', anchor='e').grid(row=32, column=0, stick=W)
label_EDGE_CPU = Label(_frame, text='EDGE_CPU', anchor='e').grid(row=33, column=0, stick=W)
label_EDGE_CPU_TEMP = Label(_frame, text='EDGE_CPU_TEMP', anchor='e').grid(row=34, column=0, stick=W)
label_EDGE_GPS_SYNC_STATUS = Label(_frame, text='GPS_SYNC_STATUS', anchor='e').grid(row=35, column=0, stick=W)
label_EDGE_GPS_SYNC_VAL = Label(_frame, text='GPS_SYNC_VAL', anchor='e').grid(row=36, column=0, stick=W)
label_EDGE_MW_COMM_STATUS = Label(_frame, text='MW_COMM_STATUS', anchor='e').grid(row=37, column=0, stick=W)
label_BAD_VAL_COUNT = Label(_frame, text='BAD_VAL_COUNT', anchor='e').grid(row=38, column=0, stick=W)
label_BAD_CRC_COUNT = Label(_frame, text='BAD_CRC_COUNT', anchor='e').grid(row=39, column=0, stick=W)
label_NO_RSPNS_COUNT = Label(_frame, text='NO_RSPNS_COUNT', anchor='e').grid(row=40, column=0, stick=W)
label_COMM_FAILURE_COUNT = Label(_frame, text='FAILURE_COUNT', anchor='e').grid(row=41, column=0, stick=W)
label_COMM_SUCCESS_COUNT = Label(_frame, text='SUCCESS_COUNT', anchor='e').grid(row=42, column=0, stick=W)
label_AVERAGE_TRANS_TIME = Label(_frame, text='AVG_TRANS_TIME', anchor='e').grid(row=43, column=0, stick=W)
label_QUEUED_NPW_BUFFERS = Label(_frame, text='QUE_NPW_BUFFERS', anchor='e').grid(row=44, column=0, stick=W)
label_AVG_RESPONSE_TIME = Label(_frame, text='AVG_RESP_TIME', anchor='e').grid(row=45, column=0, stick=W)
label_PACKET_DROP_COUNT = Label(_frame, text='PKT_DROP_COUNT', anchor='e').grid(row=46, column=0, stick=W)

hb_mkt.create_labels(1)
hb_bv61.create_labels(2)
hb_bv62.create_labels(3)
hb_bv63.create_labels(4)
hb_bv64.create_labels(5)
hb_bv65.create_labels(6)
hb_bv66.create_labels(7)
hb_bv66A.create_labels(8)
hb_kbs.create_labels(9)
hb_bv69.create_labels(10)
hb_bv70.create_labels(11)
hb_bv70A.create_labels(12)
hb_bv71.create_labels(13)
hb_bv72.create_labels(14)
hb_bv72A.create_labels(15)
hb_fsd1.create_labels(16)
hb_fsd2.create_labels(17)
hb_bv74A.create_labels(18)
hb_bv75.create_labels(19)
hb_bv76.create_labels(20)
hb_mck1.create_labels(21)

_width = 16
label_MKT = Label(_frame, text='MKT', width=_width).grid(row=0, column=1, stick=W)
label_BV61 = Label(_frame, text='BV61', width=_width).grid(row=0, column=2, stick=W)
label_BV62 = Label(_frame, text='BV62', width=_width).grid(row=0, column=3, stick=W)
label_BV63 = Label(_frame, text='BV63', width=_width).grid(row=0, column=4, stick=W)
label_BV64 = Label(_frame, text='BV64', width=_width).grid(row=0, column=5, stick=W)
label_BV65 = Label(_frame, text='BV65', width=_width).grid(row=0, column=6, stick=W)
label_BV66 = Label(_frame, text='BV66', width=_width).grid(row=0, column=7, stick=W)
label_BV66A = Label(_frame, text='BV66A', width=_width).grid(row=0, column=8, stick=W)
label_KBS = Label(_frame, text='KBS', width=_width).grid(row=0, column=9, stick=W)
label_BV69 = Label(_frame, text='BV69', width=_width).grid(row=0, column=10, stick=W)
label_BV70 = Label(_frame, text='BV70', width=_width).grid(row=0, column=11, stick=W)
label_BV70A = Label(_frame, text='BV70A', width=_width).grid(row=0, column=12, stick=W)
label_BV71 = Label(_frame, text='BV71', width=_width).grid(row=0, column=13, stick=W)
label_BV72 = Label(_frame, text='BV72', width=_width).grid(row=0, column=14, stick=W)
label_BV72A = Label(_frame, text='BV72A', width=_width).grid(row=0, column=15, stick=W)
label_FSD1 = Label(_frame, text='FSD1', width=_width).grid(row=0, column=16, stick=W)
label_FSD2 = Label(_frame, text='FSD2', width=_width).grid(row=0, column=17, stick=W)
label_BV74A = Label(_frame, text='BV74A', width=_width).grid(row=0, column=18, stick=W)
label_BV75 = Label(_frame, text='BV75', width=_width).grid(row=0, column=19, stick=W)
label_BV76 = Label(_frame, text='BV76', width=_width).grid(row=0, column=20, stick=W)
label_MCK1 = Label(_frame, text='MCK1', width=_width).grid(row=0, column=21, stick=W)

_frame.mainloop()
